= Validatable

Validatable is a library for adding validations.

by Jay[http://jayfields.blogspot.com] Fields[http://jayfields.blogspot.com]

== Download and Installation

You can download Validatable from here[http://rubyforge.org/projects/validatable] or install it with the following command.

 $ gem install validatable

== License
 	
You may use, copy and redistribute this library under the same terms as Ruby itself (see http://www.ruby-lang.org/en/LICENSE.txt).

== Examples

Validation of an entire hierarchy of objects with errors aggregated at the root object.

	class Person
	  include Validatable
	  validates_presence_of :name
	  attr_accessor :name
	end

	class PersonPresenter
	  include Validatable
	  include_validations_for :person
	  attr_accessor :person
  
	  def initialize(person)
	    @person = person
	  end
	end

	presenter = PersonPresenter.new(Person.new)
	presenter.valid? #=> false
	presenter.errors.on(:name) #=> "can't be blank"

Validations that turn off after X times of failed attempts.

	class Person
	  include Validatable
	  validates_presence_of :name, :times => 1
	  attr_accessor :name
	end

	person = Person.new
	person.valid? #=> false
	person.valid? #=> true

Validations can be given levels. If a validation fails on a level the validations for subsequent levels will not be executed.

	class Person
	  include Validatable
	  validates_presence_of :name, :level => 1, :message => "name message"
	  validates_presence_of :address, :level => 2
	  attr_accessor :name, :address
	end

	person = Person.new
	person.valid? #=> false
	person.errors.on(:name) #=> "name message"
	person.errors.on(:address) #=> nil

Similar to Rails, Validatable also supports conditional validation.

	class Person
	  include Validatable
	  attr_accessor :name
	  validates_format_of :name, :with => /.+/, :if => Proc.new { !name.nil? }
	end
	Person.new.valid? #=> true
		
Validatable also exposes an after_validate hook method.

	class Person
	  include Validatable
	  validates_presence_of :name
	  attr_accessor :name
	end
	
	class ValidatesPresenceOf
	  after_validate do |result, instance, attribute|
			instance.errors.add("#{attribute} can't be blank") unless result
		end
	end

	person = Person.new
	person.valid? #=> false
	person.errors.on(:name) #=> "name can't be blank"
	
The after_validate hook yields the result of the validation being run, 
the instance the validation was run on, and the attribute that was validate

In the above example the attribute "name" is appended to the message.

See the tests for more examples

== Contributors
Rick Bradley (Revision 25)

Zak Tamsen (Revision 29)

Jason Miller (Revision 31)

Ali Aghareza (Revision 43)

Xavier Shay (Revision 48)